:v:1 attached_pic out.mp4

	   Not all muxers support embedded thumbnails, and those who do, only support a few formats, like
	   JPEG or PNG.

       -program [title=title:][program_num=program_num:]st=stream[:st=stream...] (output)
	   Creates a program with the specified title, program_num and adds the specified stream(s) to
	   it.

       -target type (output)
	   Specify target file type ("vcd", "svcd", "dvd", "dv", "dv50"). type may be prefixed with
	   "pal-", "ntsc-" or "film-" to use the corresponding standard. All the format options (bitrate,
	   codecs, buffer sizes) are then set automatically. You can just type:

		   ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg

	   Nevertheless you can specify additional options as long as you know they do not conflict with
	   the standard, as in:

		   ffmpeg -i myfile.avi -target vcd -bf 2 /tmp/vcd.mpg

       -dn (input/output)
	   As an input option, blocks all data streams of a file from being filtered or being
	   automatically selected or mapped for any output. See "-discard" option to disable streams
	   individually.

	   As an output option, disables data recording i.e. automatic selection or mapping of any data
	   stream. For full manual control see the "-map" option.

       -dframes number (output)
	   Set the number of data frames to output. This is an obsolete alias for "-frames:d", which you
	   should use instead.

       -frames[:stream_specifier] framecount (output,per-stream)
	   Stop writing to the stream after framecount frames.

       -q[:stream_specifier] q (output,per-stream)
       -qscale[:stream_specifier] q (output,per-stream)
	   Use fixed quality scale (VBR). The meaning of q/qscale is codec-dependent.  If qscale is used
	   without a stream_specifier then it applies only to the video stream, this is to maintain
	   compatibility with previous behavior and as specifying the same codec specific value to 2
	   different codecs that is audio and video generally is not what is intended when no
	   stream_specifier is used.

       -filter[:stream_specifier] filtergraph (output,per-stream)
	   Create the filtergraph specified by filtergraph and use it to filter the stream.

	   filtergraph is a description of the filtergraph to apply to the stream, and must have a single
	   input and a single output of the same type of the stream. In the filtergraph, the input is
	   associated to the label "in", and the output to the label "out". See the ffmpeg-filters manual
	   for more information about the filtergraph syntax.

	   See the -filter_complex option if you want to create filtergraphs with multiple inputs and/or
	   outputs.

       -filter_script[:stream_specifier] filename (output,per-stream)
	   This option is similar to -filter, the only difference is that its argument is the name of the
	   file from which a filtergraph description is to be read.

       -filter_threads nb_threads (global)
	   Defines how many threads are used to process a filter pipeline. Each pipeline will produce a
	   thread pool with this many threads available for parallel processing.  The default is the
	   number of available CPUs.

       -pre[:stream_specifier] preset_name (output,per-stream)
	   Specify the preset for matching stream(s).

       -stats (global)
	   Print encoding progress/statistics. It is on by default, to explicitly disable it you need to
	   specify "-nostats".

       -progress url (global)
	   Send program-friendly progress information to url.

	   Progress information is written approximately every second and at the end of the encoding
	   process. It is made of "key=value" lines. key consists of only alphanumeric characters. The
	   last key of a sequence of progress information is always "progress".

       -stdin
	   Enable interaction on standard input. On by default unless standard input is used as an input.
	   To explicitly disable interaction you need to specify "-nostdin".

	   Disabling interaction on standard input is useful, for example, if ffmpeg is in the background
	   process group. Roughly the same result can be achieved with "ffmpeg ... < /dev/null" but it
	   requires a shell.

       -debug_ts (global)
	   Print timestamp information. It is off by default. This option is mostly useful for testing
	   and debugging purposes, and the output format may change from one version to another, so it
	   should not be employed by portable scripts.

	   See also the option "-fdebug ts".

       -attach filename (output)
	   Add an attachment to the output file. This is supported by a few formats like Matroska for
	   e.g. fonts used in rendering subtitles. Attachments are implemented as a specific type of
	   stream, so this option will add a new stream to the file. It is then possible to use per-
	   stream options on this stream in the usual way. Attachment streams created with this option
	   will be created after all the other streams (i.e. those created with "-map" or automatic
	   mappings).

	   Note that for Matroska you also have to set the mimetype metadata tag:

		   ffmpeg -i INPUT -attach DejaVuSans.ttf -metadata:s:2 mimetype=application/x-truetype-font out.mkv

	   (assuming that the attachment stream will be third in the output file).

       -dump_attachment[:stream_specifier] filename (input,per-stream)
	   Extract the matching attachment stream into a file named filename. If filename is empty, then
	   the value of the "filename" metadata tag will be used.

	   E.g. to extract the first attachment to a file named 'out.ttf':

		   ffmpeg -dump_attachment:t:0 out.ttf -i INPUT

	   To extract all attachments to files determined by the "filename" tag:

		   ffmpeg -dump_attachment:t "" -i INPUT

	   Technical note -- attachments are implemented as codec extradata, so this option can actually
	   be used to extract extradata from any stream, not just attachments.

       -noautorotate
	   Disable automatically rotating video based on file metadata.

   Video Options
       -vframes number (output)
	   Set the number of video frames to output. This is an obsolete alias for "-frames:v", which you
	   should use instead.

       -r[:stream_specifier] fps (input/output,per-stream)
	   Set frame rate (Hz value, fraction or abbreviation).

	   As an input option, ignore any timestamps stored in the file and instead generate timestamps
	   assuming constant frame rate fps.  This is not the same as the -framerate option used for some
	   input formats like image2 or v4l2 (it used to be the same in older versions of FFmpeg).  If in
	   doubt use -framerate instead of the input option -r.

	   As an output option, duplicate or drop input frames to achieve constant output frame rate fps.

       -s[:stream_specifier] size (input/output,per-stream)
	   Set frame size.

	   As an input option, this is